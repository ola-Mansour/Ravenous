{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleLocationChange","bind","handleTermChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","zip_ode","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19885b94.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src={this.props.business.imageSrc} alt=''/>\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category.toUpperCase()}</h3>\n            <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n            <p>{`${this.props.business.reviewCount} reviews`}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\n\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className=\"BusinessList\">\n        {\n          this.props.businesses.map(business => {\n            return <Business key={business.id} business={business}\n            />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nconst sortByOptions = {\n  'Best Match': 'best_match',\n  'Highest Rated': 'rating',\n  'Most Reviewed': 'review_count'\n};\n\nclass SearchBar extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      term: '',\n      location:'',\n      sortBy:'best-match'\n    } ;\n    this.sortByOptions = {\n      'Best Match': 'best_match',\n      'Highest Rated': 'rating',\n      'Most Reviewed': 'review_count'\n    };\n    this.handleLocationChange =this.handleLocationChange.bind(this);\n    this.handleTermChange=this.handleTermChange.bind(this);\n    this.handleSearch=this.handleSearch.bind(this)\n  }\n  getSortByClass(sortByOption){\n    if(sortByOption===this.state.sortBy){\n      return 'active'\n    }\n    return '' ;\n  }\n  handleSortByChange(sortByOption){\n    this.setState({sortBy:sortByOption});\n  }\n  handleTermChange(event){\n    this.setState({term :event.target.value})\n  }\n\n\n  handleLocationChange(event){\n    this.setState({location :event.target.value})\n\n  }\n\n  handleSearch(event){\n    this.props.searchYelp(this.state.term,this.state.location,this.state.sortBy);\n    event.preventDefault()\n  }\n  renderSortByOptions() {\n    return Object.keys(sortByOptions).map(sortByOption => {\n      let sortByOptionValue = sortByOptions[sortByOption];\n      return <li className={this.getSortByClass(sortByOptionValue)}\n                  key={sortByOptionValue}\n                  onClick= {this.handleSortByChange.bind(this,sortByOptionValue)}\n                  >\n                    {sortByOption}\n        </li>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input \n          placeholder=\"Search Food (like pizza)\"\n          onChange={this.handleTermChange}  />\n          <input \n          placeholder=\"Where?\" \n          onChange={this.handleLocationChange}/>\n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearch}>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","const apiKey ='ESJeNcIq-bAhxHdCMVx0bch61xHmfdf5Hxu4qVur2uOqNsrGSIFBCHkhJrlxmTsqn6Qb1UpXeYsKf_0CAUvo9V7AN2GEtF-xgyDqPFrK7vYPYIemF2Gw_YzDRYc1X3Yx';\r\nlet Yelp ={\r\nsearchYelp(term,location,sortBy){\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,{\r\n        headers:{Authorization:`Bearer ${apiKey}`},\r\n\r\n    }).then((response) =>{\r\n        return response.json();\r\n    }).then((jsonResponse)=>{\r\n        if (jsonResponse.businesses){\r\n            return jsonResponse.businesses.map(business =>{\r\n                console.log(business);\r\n                return {\r\n                    id:business.id,\r\n                    imageSrc:business.image_url,\r\n                    name:business.name,\r\n                    address:business.location.address1,\r\n                    city:business.location.city,\r\n                    state:business.location.state,\r\n                    zipCode:business.location.zip_ode,\r\n                    category:business.categories[0].title,\r\n                    rating:business.rating,\r\n                    reviewCount:business.review_count\r\n                }\r\n            });\r\n        }\r\n    });\r\n    }\r\n\r\n};\r\nexport default Yelp ;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from './../../util/Yelp';\nimport Business from './../Business/Business';\n\n\n\nclass App extends React.Component {\nconstructor(props){\n    super(props);\n    this.state ={\n      businesses: [],\n    };\n    this.searchYelp=this.searchYelp.bind(this);\n}\n\n  searchYelp(term,location,sortBy){\n    Yelp.searchYelp(term,location,sortBy).then((businesses)=>{\n      this.setState({businesses:businesses})\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}